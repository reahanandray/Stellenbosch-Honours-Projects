// GIT_712 (GDS) Assignment 1
// Reah Anandray
// 23651199
// GEE Time Series & Change Detection Analysis

// This project aims to detect the presence and effect of flooding in the KwaZulu-Natal province in  
// 2022 based on flood natural disaster that occured between the 11-15th April 2022 in that region.
// It uses four indices namely, NDMI, NDWI, SMI, and NDVI for flood detection effects in 
// vegetation moisture, surface water, soil moisture, and vegetation health respectively.
// It creates a time series analysis over a monthly temporal range of the entire year 2022 in 
// which these data transformations can be clustered before and after the event using unsupervised
// classification (k-means). These resuluts can then be used for change detection before and after 
// the event for each indice. 

// --------------------------------- SPECIFYING STUDY AREA -------------------------------------------------

// Import shapefile containing the provinces of South Africa as a feature collection
var provinces = ee.FeatureCollection('projects/ee-reahanandray/assets/Admin_provinces');

// Filter the shapefile to display only the Kwa-Zulu Natal province on the map layer
// This will be the study area
var kzn = provinces.filter(ee.Filter.eq('ADM1_EN', 'KwaZulu-Natal'));

// Zoom to the KZN boundary layer extent on the map
Map.centerObject(kzn, 8);
Map.addLayer(kzn, {'color': 'pink'}, 'KwaZulu-Natal Boundary');

// --------------------------------- SELECT IMAGE COLLECTION ------------------------------------------------

// The sensor dataset used is MODIS: MYD09A1.061 Aqua Surface Reflectance 8-Day Global 500m
// The temporal range from this dataset is specified as a full-year time series for the year 2022
var sensor = ee.ImageCollection('MODIS/061/MOD09A1')
  .filterBounds(kzn)
  .filterDate('2022-01-01', '2022-12-31'); 

// ----------------------------------- PERFORM CLOUD MASKING ------------------------------------------------

// Perform cloud masking by creating a function to compute the indices
var addIndices = function(image) {
  // Extract the QA band containing cloud information
  // The 10th bit in the QA band indicates cloud presence, therfore keep only non-cloudy pixels
  var cloudMask = image.select('QA').bitwiseAnd(1 << 10).eq(0);
  
  // Apply the cloud mask to the image to remove cloud-contaminated pixels
  image = image.updateMask(cloudMask);
  
// ----------------------------CREATE EACH INDEX USING BAND MATHS CALCULATIONS --------------------------------

  // Create a variable for each index using the relevant sensor band calculations
  // NDVI: Normalised Difference Vegetation Index
  var ndvi = image.normalizedDifference(['sur_refl_b02', 'sur_refl_b01']).rename('NDVI');
  // NDMI: Normalised Difference Moisture Index
  var ndmi = image.normalizedDifference(['sur_refl_b02', 'sur_refl_b06']).rename('NDMI');
  // NDWI: Normalised Difference Water Index
  var ndwi = image.normalizedDifference(['sur_refl_b04', 'sur_refl_b02']).rename('NDWI');
  // SMI: Soil Moisture Index
  var smi = ndvi.subtract(ndwi).divide(ndvi.add(ndwi)).rename('SMI');
  
  // Create unique sensor bands for each index
  // Clip this dataset to the now cloud masked spatial extent of the study area
  return image.addBands([ndvi, ndmi, smi, ndwi]).clip(kzn);
};

// Combine the indices into a single dataset that can be individually extracted 
var indices = sensor.map(addIndices);

// ------------------------------- CREATE A VARIABLE FOR THE STUDY AREA -----------------------------------------

// Define the study area region to generate the time series charts using the clipped KZN extent
var chartRegion = kzn.geometry()

// ------------------------------ EXTRACT FIRST IMAGE OF EACH MONTH FOR TIME SERIES ------------------------------

// Create a function to extract the first available image of each month from the MODIS image collection 
var monthlyStart = function(imageCollection) {
  return ee.ImageCollection(
    ee.List.sequence(1, 12).map(function(month) {
      // Filter the images for the first of each month in the year 2022
      var firstOfMonth = imageCollection.filter(ee.Filter.calendarRange(month, month, 'month'))
        // Sort the images in date order (January-December)
        .sort('system:time_start')
        .first();
      return firstOfMonth.set('system:time_start', firstOfMonth.get('system:time_start'));
    })
  );
};

// Create a variable that contains the first image of each month data from the function above
var monthlyIndices = monthlyStart(indices);

// ------------------------------ DEFINE THE VISUALISATION ------------------------------

// Define visualization parameters for each index
var visParamsNDVI = {min: -1, max: 1, palette: ['blue', 'white', 'green']};
var visParamsNDMI = {min: -1, max: 1, palette: ['blue', 'white', 'green']};
var visParamsSMI = {min: -1, max: 1, palette: ['blue', 'white', 'green']};
var visParamsNDWI = {min: -1, max: 1, palette: ['blue', 'white', 'green']};

// Select the first image of the year (January 2022) for visualization
var firstImage = monthlyIndices.first();

// ------------------------------ CREATE NDVI TIME SERIES CHART ------------------------------

// Generate a time series analysis chart for KZN in 2022 (filter monthly) 
var ndviChart = ui.Chart.image.series({
  imageCollection: monthlyIndices.select('NDVI'),
  region: chartRegion,
  reducer: ee.Reducer.mean(),
  scale: 500,
  xProperty: 'system:time_start'
}).setOptions({
  title: 'Monthly NDVI Time Series Chart of KZN in 2022 for Vegetation Loss Detection',
  vAxis: {title: 'NDVI Value'},
  hAxis: {title: 'Month', format: 'MM-YYYY'},
  trendlines: {0: {color: 'red'}},
  lineWidth: 2,
  colors: ['green'],
  series: {
    0: {pointSize: 4, color: 'green'}  
  }
});

// ------------------------------ CREATE NDMI TIME SERIES CHART ------------------------------

// Generate a time series analysis chart for KZN in 2022 (filter monthly) 
var ndmiChart = ui.Chart.image.series({
  imageCollection: monthlyIndices.select('NDMI'),
  region: chartRegion,
  reducer: ee.Reducer.mean(),
  scale: 500,
  xProperty: 'system:time_start'
}).setOptions({
  title: 'Monthly NDMI Time Series Chart of KZN in 2022 for Waterlogged Vegetation Detection',
  vAxis: {title: 'NDMI Value'},
  hAxis: {title: 'Month', format: 'MM-YYYY'},
  trendlines: {0: {color: 'red'}},
  lineWidth: 2,
  colors: ['blue'],
  series: {
    0: {pointSize: 4, color: 'blue'}  
  }
});

// ------------------------------ CREATE SMI TIME SERIES CHART ------------------------------

// Generate a time series analysis chart for KZN in 2022 (filter monthly) 
var smiChart = ui.Chart.image.series({
  imageCollection: monthlyIndices.select('SMI'),
  region: chartRegion,
  reducer: ee.Reducer.mean(),
  scale: 500,
  xProperty: 'system:time_start'
}).setOptions({
  title: 'Monthly SMI Time Series Chart of KZN in 2022 for Waterlogged Soil Detection',
  vAxis: {title: 'SMI Value'},
  hAxis: {title: 'Month', format: 'MM-YYYY'},
  trendlines: {0: {color: 'blue'}},
  lineWidth: 2,
  colors: ['red'],
  series: {
    0: {pointSize: 4, color: 'red'}  
  }
});

// ------------------------------ CREATE NDWI TIME SERIES CHART ------------------------------

// Generate a time series analysis chart for KZN in 2022 (filter monthly) 
var ndwiChart = ui.Chart.image.series({
  imageCollection: monthlyIndices.select('NDWI'),
  region: chartRegion,
  reducer: ee.Reducer.mean(),
  scale: 500,
  xProperty: 'system:time_start'
}).setOptions({
  title: 'Monthly NDWI Time Series Chart of KZN in 2022 for Surface Water Extent Detection',
  vAxis: {title: 'NDWI Value'},
  hAxis: {title: 'Month', format: 'MM-YYYY'},
  trendlines: {0: {color: 'red'}},
  lineWidth: 2,
  colors: ['purple'],
    series: {
    0: {pointSize: 4, color: 'purple'}  
  }
});

// ------------------------------ DISPLAY EACH TIME SERIES CHART ON THE MAP ------------------------------

Map.addLayer(monthlyIndices.select('NDVI'), visParamsNDVI, 'NDVI Layer');
Map.addLayer(monthlyIndices.select('NDMI'), visParamsNDMI, 'NDMI Layer');
Map.addLayer(monthlyIndices.select('SMI'), visParamsSMI, 'SMI Layer');
Map.addLayer(monthlyIndices.select('NDWI'), visParamsNDWI, 'NDWI Layer');

print(ndviChart);
print(ndmiChart);
print(smiChart);
print(ndwiChart);
print(indices);

// ------------------- GENERATE START AND END DATES FOR PRE AND POST EVENT DETECTION ----------------------

// Create a variable to store all the relevant bands required for clustering and change detection
// This excludes any atmospheric interference bands and keeps the surface reflectance and indice bands
var finalData = indices.select(0,1,2,3,4,5,6,13,14,15,16);
// Select the start date by performing a median composite of all the dates before the event
// In this case, all dates between January and March suffice
var startDate = finalData.filterDate("2022-03-01", "2022-03-30").median();
// Select the end date by performing a median composite of all the dates after the event
// In this case, all dates between May and December suffice
var endDate = finalData.filterDate("2022-05-01", "2022-05-25").median();
// Print these outputs to observe and analyse their feature elements
print(finalData);
print(startDate);
print(endDate);

// ------------------------------ UNSUPERVISED CLASSIFICATION (K-MEANS CLUSTERING) ------------------------------

// Create a function that generates the unsupervised training dataset for the study area
var training = startDate.sample({
  region: chartRegion,
  scale: 30,
  numPixels: 10000
});

// Create a variable that trains the clusters based on the chosen training model (K-Means)
var clusterer = ee.Clusterer.wekaKMeans({nClusters: 5, 
                                          init: 2,
                                          distanceFunction:'Manhattan',
                                          maxIterations: 10}).train(training);

// Run the trained clusterer on the input data
// This varaible stores the start date cluster output before the event
var startOutput = startDate.cluster(clusterer);
// This varaible stores the end date cluster output after the event
var endOutput = endDate.cluster(clusterer);

// Display the pre-event clustered output layer on the map 
Map.addLayer(startOutput.randomVisualizer(), {}, 'K-means Unsupervised Classification Before the Flood Event');
print('Results of the Before Event Unsupervised Classification:', startOutput);
// Display the post-event clustered output layer on the map 
Map.addLayer(endOutput.randomVisualizer(), {}, 'K-means Unsupervised Classification After the Flood Event');
print('Results of the After Event Unsupervised Classification:', endOutput);

// ------------------------------ CHANGE DETECTION USING DIFFERENCING FOR EACH INDEX ------------------------------

// Create a variable that computes the NDMI Difference Change Detection
var differenceNDMI = endDate.select("NDMI").subtract(startDate.select("NDMI"));
// Print the result output to analyse its feature components
print('NDMI Change Detection:', differenceNDMI);
// Display the difference layer to the map with a valid palette
Map.addLayer(differenceNDMI, {min: -0.5, max: 0.5, palette: ['white', 'red', 'blue']}, 'NDMI Change Detection');

// Create a variable that computes the NDVI Difference Change Detection
var differenceNDVI = endDate.select("NDVI").subtract(startDate.select("NDVI"));
// Print the result output to analyse its feature components
print('NDVI Change Detection:', differenceNDVI);
// Display the difference layer to the map with a valid palette
Map.addLayer(differenceNDVI, {min: -0.5, max: 0.5, palette: ['white', 'red', 'blue']}, 'NDVI Change Detection');

// Create a variable that computes the NDWI Difference Change Detection
var differenceNDWI = endDate.select('NDWI').subtract(startDate.select('NDWI'));
// Print the result output to analyse its feature components
print('NDWI Change Detection:', differenceNDWI);
// Display the difference layer to the map with a valid palette
Map.addLayer(differenceNDWI, {min: -0.5, max: 0.5, palette: ['white', 'red', 'blue']}, 'NDWI Change Detection');

// Create a variable that computes the SMI Difference Change Detection
var differenceSMI = endDate.select('SMI').subtract(startDate.select('SMI'));
// Print the result output to analyse its feature components
print('SMI Change Detection:', differenceSMI);
// Display the difference layer to the map with a valid palette
Map.addLayer(differenceSMI, {min: -0.5, max: 0.5, palette: ['white', 'red', 'blue']}, 'SMI Change Detection');

// ------------------------------------------ ADDITIONAL ANALYSIS ----------------------------------------------

// An interesting dataset to evaluate would be the average rainfall that occured during the flood event. 
// This section makes use of an additional image collection dataset to observe and analyse the amount of 
// rainfall that occured before, during, and after the flood to understand what charcterised this natural disaster

// ---------------------------------------- IMPORT IMAGE COLLECTION --------------------------------------------
/*
// Load the CHIRPS daily precipitation dataset
var chirps = ee.ImageCollection('UCSB-CHG/CHIRPS/DAILY');

// -------------------------------- AVERAGE MONTHLY RAINFALL IN KZN IN 2022 ------------------------------------

// Filter CHIRPS data for the year 2022 over KZN study area
var chirps2022 = chirps.filterBounds(kzn).filterDate('2022-01-01', '2022-12-31');
// Function to calculate total monthly rainfall
var calculateMonthlyRainfall = function(month) {
  var start = ee.Date.fromYMD(2022, month, 1);
  var end = start.advance(1, 'month');
  var monthlyRainfall = chirps2022.filterDate(start, end)
                                  .sum()
                                  .set('system:time_start', start.millis());
  return monthlyRainfall;
};

// Generate a collection of monthly rainfall images
var months = ee.List.sequence(1, 12);
var monthlyRainfall2022 = ee.ImageCollection.fromImages(months.map(calculateMonthlyRainfall));

// Filter CHIRPS data for April 2022
var april2022 = chirps2022.filterDate('2022-04-01', '2022-05-01');
// Calculate mean monthly rainfall over KZN
var monthlyRainfallChart = ui.Chart.image.series({
  imageCollection: monthlyRainfall2022,
  region: kzn,
  reducer: ee.Reducer.mean(),
  scale: 5000,
  xProperty: 'system:time_start'
}).setOptions({
  title: 'Monthly Average Rainfall in KZN for 2022',
  vAxis: {title: 'Rainfall (mm)'},
  hAxis: {title: 'Month', format: 'MMM'},
  lineWidth: 2,
  pointSize: 4
});

// Display the chart
print(monthlyRainfallChart);

// ------------------------------ DAILY AVERAGE RAINFALL IN KZN IN APRIL 2022 ----------------------------------

// Calculate mean daily rainfall over KZN for April 2022
var dailyRainfallAprilChart = ui.Chart.image.series({
  imageCollection: april2022,
  region: kzn,
  reducer: ee.Reducer.mean(),
  scale: 5000,
  xProperty: 'system:time_start'
}).setOptions({
  title: 'Daily Average Rainfall in KZN for April 2022',
  vAxis: {title: 'Rainfall (mm)'},
  hAxis: {title: 'Date', format: 'dd-MMM'},
  lineWidth: 2,
  pointSize: 4
});

// Display the chart
print(dailyRainfallAprilChart);

*/
